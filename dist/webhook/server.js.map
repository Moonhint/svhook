{"version":3,"sources":["../../app/webhook/server.js"],"names":["Server","constructor","default_settings","app","body_parser","opts","http","execa","hook","params","materials","options","use","urlencoded","extended","limit","json","i","length","route","post","material","bash_scripts","req","res","console","log","body","send","webhook_name","result","shell","stdout","server","createServer","listen","port","info"],"mappings":";;;;;;;;AAAO,MAAMA,MAAN,CAAa;;AAElB;AACAC,cAAY,EAAEC,gBAAF,EAAoBC,GAApB,EAAyBC,WAAzB,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,KAAlD,KAA4D,EAAxE,EAA4E;AAC1E;AACA,SAAKL,gBAAL,GAAwBA,gBAAxB;;AAEA;AACA,SAAKC,GAAL,GAAWA,GAAX;;AAEA;AACA,SAAKC,WAAL,GAAmBA,WAAnB;;AAEA;AACA,SAAKC,IAAL,GAAYA,IAAZ;;AAEA;AACA,SAAKC,IAAL,GAAYA,IAAZ;;AAEA;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAEDC,OAAKC,MAAL,EAAa;AAAA;;AACX;AACA,UAAMC,YAAYD,OAAOC,SAAzB;AACA,UAAMC,UAAUF,OAAOE,OAAvB;;AAEA;AACA,SAAKR,GAAL,CAASS,GAAT,CAAa,KAAKR,WAAL,CAAiBS,UAAjB,CAA4B,EAAEC,UAAU,IAAZ,EAAmBC,OAAO,OAA1B,EAA5B,CAAb;AACA,SAAKZ,GAAL,CAASS,GAAT,CAAa,KAAKR,WAAL,CAAiBY,IAAjB,CAAsB,EAACD,OAAO,OAAR,EAAtB,CAAb;;AAEA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIP,UAAUQ,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,WAAKd,GAAL,CAASgB,KAAT,CAAgB,WAAUT,UAAUO,CAAV,EAAa,aAAb,CAA4B,EAAtD,EAAyDG,IAAzD,CAA8D,CAC5D,MAAM;;AAEJ,YAAIC,WAAWX,UAAUO,CAAV,CAAf;AACA,YAAIK,eAAeD,SAASC,YAA5B;;AAEA;AAAA,uCAAO,WAAOC,GAAP,EAAYC,GAAZ,EAAoB;;AAEzBC,oBAAQC,GAAR,CAAYH,IAAII,IAAhB;;AAEAH,gBAAII,IAAJ,CAAU,GAAEP,SAASQ,YAAa,KAAlC;;AAEA,gBAAIC,MAAJ;;AAEA,iBAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIK,aAAaJ,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5Ca,uBAAS,MAAM,MAAKvB,KAAL,CAAWwB,KAAX,CAAiBT,aAAaL,CAAb,CAAjB,CAAf;AACAQ,sBAAQC,GAAR,CAAYI,OAAOE,MAAnB;AACD;AAEF,WAbD;;AAAA;AAAA;AAAA;AAAA;AAeD,OArB2D,GAA9D;AAuBD;;AAED;AACA,QAAIC,SAAS,KAAK3B,IAAL,CAAU4B,YAAV,CAAuB,KAAK/B,GAA5B,CAAb;;AAEA8B,WAAOE,MAAP,CAAc,KAAK9B,IAAL,CAAU+B,IAAxB,EAA8B,MAAM;AAClCX,cAAQY,IAAR,CAAc,kBAAiB,KAAKhC,IAAL,CAAU+B,IAAK,EAA9C;AACD,KAFD;AAID;AAjEiB,C,QAAPpC,M,GAAAA,M;AAkEZ","file":"server.js","sourcesContent":["export class Server {\n\n  // Depedency Injection:\n  constructor({ default_settings, app, body_parser, opts, http, execa } = {}) {\n    // configuration default_settings\n    this.default_settings = default_settings;\n\n    // express app\n    this.app = app;\n\n    // body parser helper\n    this.body_parser = body_parser;\n\n    // server options\n    this.opts = opts;\n\n    // http client\n    this.http = http;\n\n    // spawn child process\n    this.execa = execa;\n  }\n\n  hook(params) {\n    //init all routes\n    const materials = params.materials;\n    const options = params.options;\n\n    //body parser middleware\n    this.app.use(this.body_parser.urlencoded({ extended: true , limit: '500mb'}));\n    this.app.use(this.body_parser.json({limit: '500mb'}));\n\n    for (var i = 0; i < materials.length; i++) {\n      this.app.route(`/svhook/${materials[i][\"webhook_url\"]}`).post((\n        () => {\n\n          let material = materials[i];\n          let bash_scripts = material.bash_scripts;\n\n          return async (req, res) => {\n\n            console.log(req.body);\n\n            res.send(`${material.webhook_name} ok`);\n\n            let result;\n\n            for (var i = 0; i < bash_scripts.length; i++) {\n              result = await this.execa.shell(bash_scripts[i]);\n              console.log(result.stdout);\n            }\n\n          }\n\n        }\n      )());\n    }\n\n    //up server\n    let server = this.http.createServer(this.app);\n\n    server.listen(this.opts.port, () => {\n      console.info(`svhook at port ${this.opts.port}`);\n    });\n\n  }\n};\n"]}