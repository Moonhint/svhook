{"version":3,"sources":["../../app/webhook/server.js"],"names":["Server","constructor","default_settings","app","body_parser","opts","http","execa","cache","server","hook","params","configs","materials","options","use","urlencoded","extended","limit","json","i","length","route","route_prefix","post","material","bash_scripts","req","res","print_req_body","console","log","body","send","webhook_name","ignore_execution","material_branches","only_branches","git_refs_arr","ref","split","source_branch","undefined","founded_branch_index","indexOf","curr_bash_script","lookout","last_lookout","get","lookout_script","script","put","lookout_execution_delay","key","value","info","print_and_execute","env","del","toFixed","createServer","listen","port","result","shell","stdout","e","error"],"mappings":"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","file":"server.js","sourcesContent":["export class Server {\n\n  // Depedency Injection:\n  constructor({ default_settings, app, body_parser, opts, http, execa, cache } = {}) {\n    // configuration default_settings\n    this.default_settings = default_settings;\n\n    // express app\n    this.app = app;\n\n    // body parser helper\n    this.body_parser = body_parser;\n\n    // server options\n    this.opts = opts || default_settings.server;\n\n    // http client\n    this.http = http;\n\n    // spawn child process\n    this.execa = execa;\n\n    // memory cache\n    this.cache = cache;\n  }\n\n  hook(params) {\n    const configs = params || this.default_settings.hook;\n\n    //init all routes\n    const materials = configs.materials;\n    const options = configs.options || this.default_settings.hook.options;\n\n    //body parser middleware\n    this.app.use(this.body_parser.urlencoded({ extended: true , limit: '500mb'}));\n    this.app.use(this.body_parser.json({limit: '500mb'}));\n\n    for (var i = 0; i < materials.length; i++) {\n      this.app.route(`/${this.opts.route_prefix}/${materials[i][\"webhook_url\"]}`).post((\n        () => {\n\n          let material = materials[i];\n          let bash_scripts = material.bash_scripts;\n\n          return async (req, res) => {\n\n            if (this.opts.print_req_body){\n              console.log(req.body);\n            }\n            \n            res.send(`${material.webhook_name} ok`);\n            \n            let ignore_execution = false;\n\n            let material_branches = material.only_branches;\n            let git_refs_arr = req.body.ref.split('/');\n            let source_branch = git_refs_arr[git_refs_arr.length - 1];\n\n            // check for eligible branches if specifed\n            if (material_branches !== undefined){\n              let founded_branch_index = material_branches.indexOf(source_branch)\n              if (founded_branch_index === -1){\n                // not found in eligible to execute branches, so will ignore execution\n                ignore_execution = true;\n                console.log(`<----- [Ignore Execute] reason: not eligible branch ------>`);\n              }\n            }\n\n            if (!ignore_execution) {\n              for (var i = 0; i < bash_scripts.length; i++) {\n                let curr_bash_script = bash_scripts[i];\n  \n                if (curr_bash_script.lookout){\n                  let last_lookout = this.cache.get(curr_bash_script.lookout);\n                  let lookout_script = curr_bash_script.script;\n  \n                  if (last_lookout === null){\n                    this.cache.put(curr_bash_script.lookout, 1, options.lookout_execution_delay, async (key, value) => {\n                      console.info(`Script of \"${key}\" was stacked ${value} times before execution!`);\n                      this.print_and_execute(lookout_script, options.env);\n                    });\n                  }else{\n                    this.cache.del(curr_bash_script.lookout);\n                    this.cache.put(curr_bash_script.lookout, last_lookout+1, options.lookout_execution_delay, async (key, value) => {\n                      console.info(`Script of \"${key}\" was stacked ${value} times before execution!`);\n                      this.print_and_execute(lookout_script, options.env);\n                    });\n                  }\n                  console.info(`\\nLooking out for another script with key \"${curr_bash_script.lookout}\"`);\n                  console.info(`If none is provided in ${(options.lookout_execution_delay/60000).toFixed(2)} minutes I will execute the script...\\n`);\n                }else{\n                  this.print_and_execute(curr_bash_script, options.env);\n                }\n              }\n            }\n\n          }\n\n        }\n      )());\n    }\n\n    //up server\n    let server = this.http.createServer(this.app);\n\n    server.listen(this.opts.port, () => {\n      console.info(`svhook at port ${this.opts.port}`);\n    });\n\n  }\n\n  async print_and_execute(script, env){\n\n    let result;\n\n    try {\n      console.log(`<----- [Execute] ${script} ------>`);\n      result = await this.execa.shell(script, {env});\n      console.log(`<----- [Execution Output] ${script} ------>\\n`);\n      console.log(`${result.stdout}\\n\\n`);\n    } catch (e) {\n      console.error(e);\n    }\n\n  }\n\n};\n"]}